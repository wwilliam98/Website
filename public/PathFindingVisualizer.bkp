//for JS use ESModules (import ....), for Node use CommonJS (require ....)
import Node from "/PathFindingNode.js";
import {create_recursive_horizontal, create_perimeterWall} from "./PathFinding/createMaze.js";
import {BFS, DFS, twoBFS} from "./PathFinding/PathFindingUnweightedAlgorithm.js";

// Board attributes
function Board(height, width){
	// Setups the board
	this.height = height; //used
	this.width = width; //used

	// For algorithm
	this.boardArray = []; //used
	this.getNodesByID = {}; //used
	this.nodes_adjacency_list = {}; //used {id: set of neighbors}
	this.nodes_visited = {}

	this.start = null; //used
	this.target = null; //used
	this.object = null;

	// Event listeners
	this.lastEnteredElement = null
	this.mouseDown = false; //used
	this.currentMouseNode = null;
	this.pickedUpNode = null; //used
	this.selectedNodeType = "normal"; //used

	this.previouslySwitchNode = null;

	this.previousNodeStatus = null; //used
	this.originalNodeLocation = null;
	this.previouslySwitchedNodeWeight = 0;
	this.savedNode = null

	this.keyDown = {}; //might use

	// Things to be animated
	this.nodesToAnimate = []; //used
	this.objectNodesToAnimate = [];
	this.AnimateFoundPath = [];
	this.objectShortestPathNodesToAnimate = [];
	this.animateWalls = []; //used
	
	this.selectedAlgorithm = 'DFS'; //used
	this.isAlgoRunning = false;
	this.currentHeuristic = null;
	this.numberOfObjects = 0;
	this.isObject = false;
	this.buttonsOn = false;
	this.speed = "fast";
};

// Board Setup
Board.prototype.createGrid = function(){
	let tableHTML = "";
	for (let r = 0; r < this.height; r++){
		let currentArrayRow = [];
		let currentHTMLRow = "<tr>";

		for (let c = 0; c < this.width; c++){
			let newNodeId = `${r}-${c}`, nodeType, newNode;
			if (r === Math.floor(this.height / 2) && c === Math.floor(this.width / 4)) {
				nodeType = "start";
				this.start = `${newNodeId}`;

			} else if (r === Math.floor(this.height / 2) && c === Math.floor(3 * this.width / 4)) {
				nodeType = "target";
				this.target = `${newNodeId}`;

			} else {
				nodeType = "normal";
			}

			// Create new node for the div
			newNode = new Node(newNodeId, nodeType); //ID, weight, type, status, previousNode, Path\
			this.getNodesByID[`${newNodeId}`] = newNode;
			currentArrayRow.push(newNode);
			currentHTMLRow += `<td id="${newNodeId}" class="${nodeType}"></td>`;
		}
		this.boardArray.push(currentArrayRow);
		tableHTML += `${currentHTMLRow}</tr>`;
	}
	let board = document.getElementById("board");
	board.innerHTML = tableHTML;
};
// Board Setup End

// Board Functions
Board.prototype.getNodefromBoard = function(id) { // Get Node, given the id (ex. "0-0")
	let coordinates = id.split("-");
	let r = parseInt(coordinates[0]);
	let c = parseInt(coordinates[1]);
	return this.boardArray[r][c];
};

Board.prototype.changeNormalNodeToWall = function(currentNode) {
	let specialStatus = ["start", "target", "object"];
	let currentelement = document.getElementById(currentNode.id);
	console.log(currentNode.type)
	if (!specialStatus.includes(currentNode.type)) {
		currentNode.type = "wall";
		currentelement.className = "wall";
		currentNode.weight = 0;
	}
}

Board.prototype.changeWalltoNormal = function(currentNode) {
	let specialStatus = ["start", "target", "object"];
	let currentelement = document.getElementById(currentNode.id);
	if (!specialStatus.includes(currentNode.type)) {
		currentNode.type = "normal";
		currentelement.className = "normal";
	}
	currentNode.weight = 1;
}

Board.prototype.clearNode = function(currentNode) {
	let specialStatus = ["start", "target", "object"];
	let currentelement = document.getElementById(currentNode.id);
	if (!specialStatus.includes(currentNode.type)) {
		currentNode.type = "normal";
		currentelement.className = "normal";
		currentNode.weight = 1;
	}
}

Board.prototype.MoveSpecialNode = function(newLocationNode) {
	let element = document.getElementById(newLocationNode.id), originalNodeElement;
	if (this.originalNodeLocation){
		originalNodeElement = document.getElementById(this.originalNodeLocation.id);
	}
	// As long as the new location is not a special node
	if (newLocationNode.type !== "target" && newLocationNode.type !== "start" && newLocationNode.type !== "object") {
	  	if (this.originalNodeLocation) {
			this.originalNodeLocation.type = this.previousNodeStatus;
			originalNodeElement.className = this.previouslySwitchedNodeWeight === 15 ? "unvisited weight" : this.previousNodeStatus;

			this.originalNodeLocation.weight = this.previouslySwitchedNodeWeight === 15 ? 15 : 0;
			this.originalNodeLocation = null;
			this.previouslySwitchedNodeWeight = newLocationNode.weight;
	
			this.previousNodeStatus = newLocationNode.type;
			element.className = this.selectedNodeType;
			newLocationNode.type = this.selectedNodeType;
	
			newLocationNode.weight = 0;
		}
	} else if (newLocationNode.type !== this.selectedNodeType && !this.isAlgoRunning) {
		this.originalNodeLocation.type = this.selectedNodeType;
		originalNodeElement.className = this.selectedNodeType;
	} else if (newLocationNode.type === this.selectedNodeType){
		this.originalNodeLocation = newLocationNode;
		element.className = this.previousNodeStatus;
		newLocationNode.type = this.previousNodeStatus;
	}
};

Node.prototype.copy = function() {
	return new Node(this.id, this.type);
};

// Only when mouse enter then we move the node
Board.prototype.MoveSpecialNode2 = function(newLocationNode) {
	let element = document.getElementById(newLocationNode.id), firstPickupLocation, previouslySwitchNodeElement, nextNodeElement, newLocationNodeElement, nextLocationNodeCopy;
	// As long as the new location is not a special node
	if (newLocationNode.type !== "target" && newLocationNode.type !== "start" && newLocationNode.type !== "object") {
		// If there is previous, create copy of the selected node, replace selected with previous, set the previous as the new node, replace the new with selectednode
		if (this.savedNode != null){
			// For later to be saved/stored
			nextLocationNodeCopy = newLocationNode.copy()

			// Change the next location with the Node that we pickUp
			nextNodeElement = document.getElementById(this.currentMouseNode.id);
			nextNodeElement.className = this.pickedUpNode.type
			newLocationNode.type = this.pickedUpNode.type
			newLocationNode.weight = this.pickedUpNode.weight

			// Replace previously switch node with the saved Node
			previouslySwitchNodeElement = document.getElementById(this.previouslySwitchNode.id);
			previouslySwitchNodeElement.className = this.savedNode.type
			this.previouslySwitchNode.type = this.savedNode.type
			this.previouslySwitchNode.weight = this.savedNode.weight
			
			// Replace the previous node with the newLocationNode
			this.savedNode = nextLocationNodeCopy
		}else{
			// Get picked up node
			firstPickupLocation = this.getNodefromBoard(this.pickedUpNode.id)

			// node that has no previous Node
			previouslySwitchNodeElement = document.getElementById(this.pickedUpNode.id);
			previouslySwitchNodeElement.className = "normal"
			firstPickupLocation.type = "normal"
			
			// Replace the previous node with the newLocationNode
			this.savedNode = newLocationNode.copy()
			
			// replace the newNode with the pickedUpNode
			newLocationNodeElement = document.getElementById(newLocationNode.id);
			newLocationNodeElement.className = this.pickedUpNode.type
			newLocationNode.type = this.pickedUpNode.type
			newLocationNode.weight = this.pickedUpNode.weight
		}
		this.previouslySwitchNode = newLocationNode;
	} 
};
// Board Functions End

////////////////////////////////////---------EVENT LISTENER---------////////////////////////////////////
Board.prototype.addEventListener = function(){
	let board = this;
	for (let i = 0; i < board.height; i++){
		for (let j = 0; j < board.width; j++){
			let currentId = `${i}-${j}`;
			let currentNode = board.getNodefromBoard(currentId);
			let currentTableElement = document.getElementById(currentId);
			
			// Just set to wall when initial click is a wall and vice versa
			currentTableElement.onmousedown = (e) => {
				if (!board.isAlgoRunning){
					board.mouseDown = true
					board.currentMouseNode = currentNode;
					// Left mouse and control key to move special Node
					if (currentNode.type == "start" || currentNode.type == "target" || currentNode.type == "object"){
						board.pickedUpNode = currentNode.copy();
						board.selectedNodeType = currentNode.type;

						board.originalNodeLocation = currentNode;
						board.savedNode = null
					}else if (board.keyDown["87"] == true){ // If "W" is pressed, create wall
						board.changeNormalNodeToWall(currentNode);
					}else if (board.keyDown["82"] == true){ // If "R" is pressed, turn it back to normal node
						board.clearNode(currentNode);
					}
				}
			};

			currentTableElement.onmouseenter = (e) =>{
				if (!board.isAlgoRunning && board.lastEnteredElement != e.target){
					board.currentMouseNode = currentNode;
					board.lastEnteredElement = e.target

					if (board.mouseDown && board.pickedUpNode !== null){
						board.MoveSpecialNode2(currentNode)
					}else if (board.mouseDown && board.keyDown["87"] == true){
						board.changeNormalNodeToWall(currentNode);
						console.log(currentNode)
						// board.selectedNodeType = "normal";
					}else if (board.mouseDown && board.keyDown["82"] == true){
						board.clearNode(currentNode)
					}
				}
			}

			// Save the start/target/object to the board
			currentTableElement.onmouseup = (e) =>{
				if (!board.isAlgoRunning){
					board.mouseDown = false;
					if (board.pickedUpNode && board.pickedUpNode.type === "start"){
						board.start = currentNode;
					}else if(board.pickedUpNode && board.pickedUpNode.type === "target"){
						board.target = currentNode;
					}else if(board.pickedUpNode && board.pickedUpNode.type === "object"){
						board.object = currentNode;
					}
				}
				board.pickedUpNode = null;
				board.currentMouseNode = null;
				board.selectedNodeType = null;

				console.log(board.boardArray)
			};

		}
	}
};
////////////////////////////////////---------EVENT LISTENER ENDS---------////////////////////////////////////

// Connect Nodes
Board.prototype.connectNodes = function(){
	let directions = [[0,1],[1,0],[0,-1],[-1,0]];
	let visited = new Set();
	let queue = [];
	let nodeNeighbors = new Set();

	queue.push('0-0');
	visited.add('0-0');
	this.nodes_adjacency_list['0-0'] = [];

	while (queue){
		// console.log(queue);
		let current = queue.shift();
		current = current.split("-");
		let x = parseInt(current[0]);
		let y = parseInt(current[1]);
		nodeNeighbors = new Set();

		for (let direction=0; direction < directions.length; direction++){
			let dx = directions[direction][0];
			let dy = directions[direction][1];
			let nx = x;
			let ny = y;

			if (0 <= nx + dx && nx + dx < this.height && 0 <= ny + dy && ny + dy < this.width){
				nx += dx;
				ny += dy;
				
				nodeNeighbors.add(`${nx}-${ny}`);

				if (!visited.has(`${nx}-${ny}`)){
					queue.push(`${nx}-${ny}`);
					visited.add(`${nx}-${ny}`);
				}
			}
		}
		this.nodes_adjacency_list[`${current[0]}-${current[1]}`] = Array.from(nodeNeighbors);
		if (x === this.height - 1 && y === this.width - 1){
				break;
			}
		}
}
// Connect Nodes End

Board.prototype.animate = function(){
	let board = this
	function timeout(i, j){
		setTimeout(function(){
			if (i < 0 || i >= board.height || j < 0 || j >= board.width){
				return
			}

			let currentId = `${i}-${j}`;
			let currentNode = board.getNodefromBoard(currentId);
			let currentelement = document.getElementById(currentId);

			if (currentNode.status == "visited" || currentNode.type == "wall" || currentNode.type == "target"){
				return
			}

			if (currentNode.type != "start"){
				currentNode.status = "visited";
				currentelement.className = "visited";
			}
			// console.log(i, j)
			timeout(i, j + 1);
			timeout(i, j - 1);
			timeout(i + 1, j);
			timeout(i - 1, j);
		}, 40);
	}
	let start_row = parseInt(this.start.split("-")[0]);
	let start_col = parseInt(this.start.split("-")[1]);
	timeout(start_row, start_col);
}

Board.prototype.animatequeue = function(nodesToAnimate){ //visitedNodes is an array of nodes
	let board = this;
	function timeout(i){
		let queue = nodesToAnimate;
		
		setTimeout(function(){
			if (i > queue.length-1 || queue[i].type == "start" || queue[i].type == "target"){
				console.log(queue[i])
				return
			}
			else{
				let currentId = queue[i].id;
				let currentNode = queue[i];
				let currentelement = document.getElementById(currentId);
				currentelement.className = currentNode.type;
			}
			timeout(i+1);
		}, 20);
	}
	// console.log(nodesToAnimate);
	timeout(0);
}

Board.prototype.resetBoard = function(){
	// let navbarHeight = document.getElementById("navbarDiv").clientHeight;
	// let textHeight = document.getElementById("mainText").clientHeight + document.getElementById("algorithmDescriptor").clientHeight;
	// let height = Math.floor((document.documentElement.clientHeight - navbarHeight - textHeight) / 28);
	// let width = Math.floor(document.documentElement.clientWidth / 25);

	let height = this.height;
	let width = this.width;
	let start = Math.floor(height / 2).toString() + "-" + Math.floor(width / 4).toString();
	let target = Math.floor(height / 2).toString() + "-" + Math.floor(3 * width / 4).toString();

	Object.keys(this.getNodesByID).forEach(id => {
		let currentNode = this.getNodesByID[id];
		let currentHTMLNode = document.getElementById(id);
		if (id === start) {
			currentHTMLNode.className = "start";
			currentNode.type = "start";
		} 
		else if (id === target) {
			currentHTMLNode.className = "target";
			currentNode.type = "target"
		} 
		else {
			currentHTMLNode.className = "normal";
			currentNode.type = "normal";
		}
		currentNode.previousNode = null;
		currentNode.path = null;
		currentNode.direction = null;
		currentNode.storedDirection = null;
		currentNode.distance = Infinity;
		currentNode.totalDistance = Infinity;
		currentNode.heuristicDistance = null;
		currentNode.weight = 0;
		currentNode.relatesToObject = false;
		currentNode.overwriteObjectRelation = false;

	});
	this.start = start;
	this.target = target;
	this.object = null;
	this.nodesToAnimate = [];
	this.AnimateFoundPath = [];
	this.objectNodesToAnimate = [];
	this.shortestPathNodesToAnimate = [];
	this.objectShortestPathNodesToAnimate = [];
	this.animateWalls = [];
	this.mouseDown = false;
	this.selectedNodeType = "normal";
	this.previousNodeStatus = null;
	this.originalNodeLocation = null;
	this.previouslySwitchedNodeWeight = 0;
	
	// this.keyDown = {};
	this.isAlgoRunning = false;
	this.numberOfObjects = 0;
	this.isObject = false;

	console.log(this.nodesToAnimate)
	console.log(this.getNodesByID)
};

Board.prototype.clearPath = function(t){
	console.log(t);
}

Board.prototype.toggleButtons = function() {
	let board = this;
	document.getElementById('startButtonClearBoard').onclick = () => {
		board.resetBoard();
	}

	document.getElementById('BFSDropdown').onclick = () => {
		document.getElementById('VisualizeButtonli').innerHTML = `<li><button id=VisualizeButton class="btn btn-default navbar-btn" type="button">Visualize BFS</button></li>`;
		board.selectedAlgorithm = "BFS";
	}

	document.getElementById('DFSDropdown').onclick = () => {
		document.getElementById('VisualizeButtonli').innerHTML = `<button id="VisualizeButton" class="btn btn-default navbar-btn" type="button">Visualize DFS</button>`;
		board.selectedAlgorithm = "DFS";
	}

	document.getElementById('DijkstraDropdown').onclick = () => {
		document.getElementById('VisualizeButtonli').innerHTML = `<button id="VisualizeButton" class="btn btn-default navbar-btn" type="button">Visualize Dijkstra</button>`;
		board.selectedAlgorithm = "Dijkstra";
	}

	document.getElementById('AStarDropdown').onclick = () => {
		document.getElementById('VisualizeButtonli').innerHTML = `<button id="VisualizeButton" class="btn btn-default navbar-btn" type="button">Visualize A*</button>`;
		board.selectedAlgorithm = "AStar";
	}

	document.getElementById('VisualizeButtonli').onclick = () => {
		if (!this.isAlgoRunning){
			this.isAlgoRunning = true;
			if (board.selectedAlgorithm === "BFS") {
				BFS();
			}
			else if (board.selectedAlgorithm === "DFS") {
				console.log('iam clicked')
				DFS(board, board.start, board.target);
				console.log(board.nodesToAnimate);
				board.animatequeue(board.nodesToAnimate);
				board.animatequeue(board.AnimateFoundPath);
			}
			else if (board.selectedAlgorithm === "Dijkstra") {
				Dijkstra();
			}
			else if (board.selectedAlgorithm === "AStar") {
				AStar();
			}
			else {
				console.log("No algorithm selected");
			}
		}
		else{
			this.isAlgoRunning = false;
		}
	}


	document.getElementById('RecursiveDivisionHorizontalDropdown').onclick = () => {
		board.resetBoard();
		create_perimeterWall(this);
		create_recursive_horizontal(this, 2, this.height - 3, 2, this.width - 3, "horizontal", false);
		board.animatequeue(this.animateWalls);
	}
}

Board.prototype.visualize = function(algorithm) {
	this.algorithm = algorithm;
	this.isAlgoRunning = false;
	this.numberOfObjects = 0;
	this.isObject = false;
}

Board.prototype.initialise = function(){
	this.createGrid(); 
	// this.connectNodes();
	this.addEventListener();
	// this.toggleButtons();
};

// let height = Math.floor(($(document).height()) / 28);
// let width = Math.floor($(document).width() / 25);
let newBoard = new Board(11, 20);
// let newBoard = new Board(4, 5);
newBoard.initialise();

window.onkeydown = (e) =>{
	newBoard.keyDown[e.keyCode] = true;
	// console.log(e.keyCode)
}
window.onkeyup = (e) =>{
	newBoard.keyDown[e.keyCode] = false;
}